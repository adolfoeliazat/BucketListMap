"Points",
"Bonus",
"Points Per Game"
)]
#Convert Injury Status to more readable format
PlayerStatusElements$Status[PlayerStatusElements$Status == "a"]  <- "Available"
PlayerStatusElements$Status[PlayerStatusElements$Status == "d"]  <- "Doubtful"
PlayerStatusElements$Status[PlayerStatusElements$Status == "i"]  <- "Injured"
PlayerStatusElements$Status[PlayerStatusElements$Status == "s"]  <- "Suspended"
PlayerStatusElements$Status[PlayerStatusElements$Status == "n"]  <- "NotAvail"
PlayerStatusElements$Status[PlayerStatusElements$Status == "u"]  <- "NotAvail"
#Converted to Factor for better user exp. in DT
PlayerStatusElements[, 'Status'] <- as.factor(PlayerStatusElements[, 'Status'])
PlayerStatusElements[, 'Playing chance %'] <- as.factor(PlayerStatusElements[, 'Playing chance %'])
PlayerStatusElements[, 'Selected by %'] <- as.integer(PlayerStatusElements[, 'Selected by %'])
#Create injury league DF
injuryLeague <- PlayerStatusElements[c("Player",
"Team",
"Position",
"Status",
"Playing chance %",
"Selected by %",
"News")]
injuryLeague <- injuryLeague[which(injuryLeague$Status != "Available"),]
#Create Player Status DF
PlayerStatus <- PlayerStatusElements[c("Player",
"Team",
"Position",
"Cost",
"Status",
"Minutes",
"Points",
"Bonus",
"Points Per Game",
"Selected by %"
)]
#Create Price Watch DF
PlayerPrice <- PlayerStatusElements[c("Player",
"Team",
"Position",
"Cost",
"Total Cost Change",
"GW Cost Change",
"GW Transfers In",
"GW Transfers Out",
"No. of times in Dream Team"
)]
#Create Player Status Data table
PShtml <- datatable(PlayerStatus,
rownames = FALSE,
filter = 'top',
options = list(
searchHighlight = TRUE,
autoWidth = TRUE,
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 300, 600)
)) %>%
formatStyle(
'Status',
backgroundColor = styleEqual(c("Available", "Doubtful", "Injured", "Suspended", "NotAvail"), c('lightgreen', 'yellow', 'red', 'red', 'grey'))
)
#Create Injury League Data table
ILhtml <- datatable(injuryLeague,
rownames = FALSE,
filter = 'top',
options = list(
searchHighlight = TRUE,
autoWidth = TRUE,
columnDefs = list(list(width = '100px', targets = c(1,2,3,4))),  #with Autowidth True, this makes columns 1,2,3,4 Fixed
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 200)
)) %>%
formatStyle(
'Status',
backgroundColor = styleEqual(c("Available", "Doubtful", "Injured", "Suspended", "NotAvail"), c('lightgreen', 'yellow', 'red', 'red', 'grey'))
)
#Create Player Price Data table
PPhtml <- datatable(PlayerPrice,
rownames = FALSE,
filter = 'top',
options = list(
searchHighlight = TRUE,
autoWidth = TRUE,
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 300, 600)
)) %>%
formatStyle(
'Total Cost Change',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
) %>%
formatStyle(
'GW Cost Change',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)
#Create Player Price Vizualisation
PlayerPriceChange <- PlayerPrice[which(PlayerPrice$`Total Cost Change` != 0),]
ay <- list(
title = "Players",
#zeroline = FALSE,
#showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
ax <- list(
title = "Price Change"
#zeroline = FALSE,
#showline = FALSE,
#showticklabels = FALSE,
#showgrid = FALSE
)
ppChangeViz <- plot_ly(PlayerPriceChange, y = PlayerPriceChange$Player, x = PlayerPriceChange$`Total Cost Change`,
type = "scatter", mode = "markers", color = PlayerPriceChange$Position,
size=PlayerPriceChange$Cost,  sizes = c(1, 1000),
text = paste(PlayerPriceChange$Player,as.character(PlayerPriceChange$Cost), sep = ", "),
hoverinfo="text") %>%
layout(xaxis = ax, yaxis = ay)
#GP: Points per million Viz.
by <- list(title = "Total Minutes")
bx <- list(title = "Total Points")
ptsPerMill <- plot_ly(PlayerStatus, y = PlayerStatus$Minutes, x = PlayerStatus$Points,
type = "scatter", mode = "markers", color = PlayerStatus$Position,
text = paste(PlayerStatus$Player, round(PlayerStatus$Points/PlayerStatus$Cost, 2), sep = ", "),
size=PlayerStatus$Points/PlayerStatus$Cost,  sizes = c(1, 1000),
hoverinfo="text") %>%
layout(xaxis = bx, yaxis = by, title = 'Total Points per Million Cost')
#GP: Points per Game Per Million Viz.
cy <- list(title = "Total Minutes")
cx <- list(title = "Points Per Game Per Million Cost")
ptsPerGamePerMill <- plot_ly(PlayerStatus, y = PlayerStatus$Minutes, x = round(as.numeric( PlayerStatus$`Points Per Game`)/ PlayerStatus$Cost, 2),
type = "scatter", mode = "markers", color = PlayerStatus$Position,
text = paste( PlayerStatus$Player,round(as.numeric( PlayerStatus$`Points Per Game`)/ PlayerStatus$Cost, 2), sep = ", "),
size=(as.numeric(PlayerStatus$`Points Per Game`)/PlayerStatus$Cost),  sizes = c(1, 1000),
hoverinfo="text") %>%
layout(xaxis = cx, yaxis = cy, title = 'Points per Game per Million Cost')
#GP: Treemap Viz.
playerTreemap <- data.frame(PlayerStatus, stringsAsFactors = FALSE)
playerTreemap <- select(playerTreemap, -Position, -Cost, -Status, -Bonus, -Points.Per.Game, -Minutes, -Selected.by..)
playerTreemap[, 'Team'] <- as.character(playerTreemap[, 'Team'])
BHApts <- sum(playerTreemap[which(playerTreemap$Team == "BHA"),]$Points)
STKpts <- sum(playerTreemap[which(playerTreemap$Team == "STK"),]$Points)
SOUpts <- sum(playerTreemap[which(playerTreemap$Team == "SOU"),]$Points)
CRYpts <- sum(playerTreemap[which(playerTreemap$Team == "CRY"),]$Points)
WATpts <- sum(playerTreemap[which(playerTreemap$Team == "WAT"),]$Points)
LEIpts <- sum(playerTreemap[which(playerTreemap$Team == "LEI"),]$Points)
WHUpts <- sum(playerTreemap[which(playerTreemap$Team == "WHU"),]$Points)
SWApts <- sum(playerTreemap[which(playerTreemap$Team == "SWA"),]$Points)
EVEpts <- sum(playerTreemap[which(playerTreemap$Team == "EVE"),]$Points)
BURpts <- sum(playerTreemap[which(playerTreemap$Team == "BUR"),]$Points)
BOUpts <- sum(playerTreemap[which(playerTreemap$Team == "BOU"),]$Points)
NEWpts <- sum(playerTreemap[which(playerTreemap$Team == "NEW"),]$Points)
HUDpts <- sum(playerTreemap[which(playerTreemap$Team == "HUD"),]$Points)
WBApts <- sum(playerTreemap[which(playerTreemap$Team == "WBA"),]$Points)
LIVpts <- sum(playerTreemap[which(playerTreemap$Team == "LIV"),]$Points)
ARSpts <- sum(playerTreemap[which(playerTreemap$Team == "ARS"),]$Points)
MCIpts <- sum(playerTreemap[which(playerTreemap$Team == "MCI"),]$Points)
CHEpts <- sum(playerTreemap[which(playerTreemap$Team == "CHE"),]$Points)
MUNpts <- sum(playerTreemap[which(playerTreemap$Team == "MUN"),]$Points)
TOTpts <- sum(playerTreemap[which(playerTreemap$Team == "TOT"),]$Points)
playerTreemap$TeamPts <- as.character("")
playerTreemap[which(playerTreemap$Team == "ARS"),]$TeamPts <- paste0("ARS", " (", as.character(ARSpts), ")")
playerTreemap[which(playerTreemap$Team == "BOU"),]$TeamPts <- paste0("BOU", " (", as.character(BOUpts), ")")
playerTreemap[which(playerTreemap$Team == "BUR"),]$TeamPts <- paste0("BUR", " (", as.character(BURpts), ")")
playerTreemap[which(playerTreemap$Team == "CHE"),]$TeamPts <- paste0("CHE", " (", as.character(CHEpts), ")")
playerTreemap[which(playerTreemap$Team == "CRY"),]$TeamPts <- paste0("CRY", " (", as.character(CRYpts), ")")
playerTreemap[which(playerTreemap$Team == "EVE"),]$TeamPts <- paste0("EVE", " (", as.character(EVEpts), ")")
playerTreemap[which(playerTreemap$Team == "HUD"),]$TeamPts <- paste0("HUD", " (", as.character(HUDpts), ")")
playerTreemap[which(playerTreemap$Team == "LEI"),]$TeamPts <- paste0("LEI", " (", as.character(LEIpts), ")")
playerTreemap[which(playerTreemap$Team == "LIV"),]$TeamPts <- paste0("LIV", " (", as.character(LIVpts), ")")
playerTreemap[which(playerTreemap$Team == "MCI"),]$TeamPts <- paste0("MCI", " (", as.character(MCIpts), ")")
playerTreemap[which(playerTreemap$Team == "MUN"),]$TeamPts <- paste0("MUN", " (", as.character(MUNpts), ")")
playerTreemap[which(playerTreemap$Team == "NEW"),]$TeamPts <- paste0("NEW", " (", as.character(NEWpts), ")")
playerTreemap[which(playerTreemap$Team == "SOU"),]$TeamPts <- paste0("SOU", " (", as.character(SOUpts), ")")
playerTreemap[which(playerTreemap$Team == "STK"),]$TeamPts <- paste0("STK", " (", as.character(STKpts), ")")
playerTreemap[which(playerTreemap$Team == "BHA"),]$TeamPts <- paste0("BHA", " (", as.character(BHApts), ")")
playerTreemap[which(playerTreemap$Team == "SWA"),]$TeamPts <- paste0("SWA", " (", as.character(SWApts), ")")
playerTreemap[which(playerTreemap$Team == "TOT"),]$TeamPts <- paste0("TOT", " (", as.character(TOTpts), ")")
playerTreemap[which(playerTreemap$Team == "WAT"),]$TeamPts <- paste0("WAT", " (", as.character(WATpts), ")")
playerTreemap[which(playerTreemap$Team == "WBA"),]$TeamPts <- paste0("WBA", " (", as.character(WBApts), ")")
playerTreemap[which(playerTreemap$Team == "WHU"),]$TeamPts <- paste0("WHU", " (", as.character(WHUpts), ")")
playerTreemap$PlayerPts <- paste0(playerTreemap$Player, " (", as.character(playerTreemap$Points), ")" )
#data(PlayerStatus[which(PlayerStatus$Points > 0),])
ptree <- browsable(
tagList(
tags$head(
tags$style('text.label{font-size: 20px !important}')
),
d3tree(
treemap(playerTreemap[which(playerTreemap$Points > 0),],
index=c("TeamPts", "PlayerPts"),
vSize="Points",
vColor="Team",
palette = 'RdYlBu'),
rootname = paste("FPL 2017/18 Season Points Distribution. Total points : ",
as.character(sum(playerTreemap$Points)))
)
))
png("D:/github/gitFPL/fplBoardLive/2017/treeMapLogo.png", width = 800, height = 450, units = "px")
treemap(playerTreemap[which(playerTreemap$Points > 0),],
index=c("TeamPts", "PlayerPts"),
vSize="Points",
vColor="Team",
palette = 'RdYlBu',
title = 'FPL Points Distribution Treemap (www.fplAnalytics.com)')
dev.off()
png("D:/github/gitFPL/fplBoardLive/2017/treeMap.png", width = 800, height = 450, units = "px")
treemap(playerTreemap[which(playerTreemap$Points > 0),],
index=c("TeamPts", "PlayerPts"),
vSize="Points",
vColor="Team",
palette = 'RdYlBu',
title = '')
dev.off()
#remove the variables, not used anymore
# rm(SUNpts, STKpts, TOTpts, MUNpts, CHEpts, ARSpts, HULpts, LIVpts, MIDpts, MCIpts,
#    SWApts, SOUpts, BOUpts, LEIpts, WBApts, WATpts, EVEpts, CRYpts, WHUpts, BURpts)
#
#Fixture list Data table Creation
fixtureDf <- read.csv("D:/github/gitFPL/fplBoardLive/data/FixtureDF.csv", header = TRUE, sep = ";", stringsAsFactors=FALSE)
fixtureDf <- inner_join(PlayerStatusElements,fixtureDf, by = "id")
fixtureDf <- fixtureDf[-c(1,3,8:18,20)]
fdrTable <- datatable(fixtureDf,
rownames = FALSE,
filter = 'top',
options = list(searchHighlight = TRUE,
autoWidth = TRUE,
pageLength = 15,
lengthMenu = c(15, 30, 60, 100, 300, 600),
columnDefs = list(list(visible=FALSE, targets=c(17:26)),    #Skip cols 0 and 18 to 27
list(targets = c(7:17), searchable = FALSE), #Disable filters on thse columns
list(targets = c(0, 7:17), orderable = FALSE)  #Disable sorting
#,list(list(width = '400px', targets = c(1)))
)
))%>%
formatStyle(
'Status',
backgroundColor = styleEqual(c("Available", "Doubtful", "Injured", "Suspended", "NotAvail"), c('lightgreen', 'yellow', 'red', 'red', 'grey'))
)%>%
formatStyle(
'F1', 'FDR1',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F2', 'FDR2',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F3', 'FDR3',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
)%>%
formatStyle(
'F4', 'FDR4',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F5', 'FDR5',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
)  %>%
formatStyle(
'F6', 'FDR6',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F7', 'FDR7',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F8', 'FDR8',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F9', 'FDR9',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
) %>%
formatStyle(
'F10', 'FDR10',
backgroundColor = styleEqual(c("1", "2", "3", "4", "5"), c('#257d5a', '#00ff86', '#ebebe4', '#ff005a', '#861d46'))
)
#Transfer Anomaly chart creation
transferAnomaly <- PlayerPrice[,c(1,2,6,7,8)]
transferAnomaly <- transferAnomaly[!(transferAnomaly$`GW Transfers In` <= 100  &
transferAnomaly$`GW Transfers Out` <= 100),]
transferAnomaly$Variation <- ifelse(transferAnomaly$`GW Transfers In`> transferAnomaly$`GW Transfers Out`,
transferAnomaly$`GW Transfers In`/transferAnomaly$`GW Transfers Out`,
(transferAnomaly$`GW Transfers Out`/transferAnomaly$`GW Transfers In`)* -1)
top25 <- head(transferAnomaly[order(as.numeric(transferAnomaly$Variation)),],25)
bottom25 <-  tail(transferAnomaly[order(as.numeric(transferAnomaly$Variation)),],25)
transferAnomaly <- rbind(top25, bottom25)
tAnomaly <- plot_ly(transferAnomaly, x=transferAnomaly$Player, y=transferAnomaly$Variation,
type = 'bar',
#mode = 'markers',
name = "Transfer Anamoly",
text = paste0(transferAnomaly$Player, ' (', transferAnomaly$Team, ')'),
color = transferAnomaly$`GW Cost Change`)
# Midfielders: Transfer Selector based on Fixture difficulty rating, Cost and Total Points
fixtureDf_MID <- fixtureDf[which(fixtureDf$Position == "MID"),]
fixtureDf_MID <- fixtureDf_MID[which(fixtureDf_MID$`Points Per Game` > 2),]
fixtureDf_MID <- fixtureDf_MID[,c(1:7,18:27)]
fixtureDf_MID$totFDR <- rowSums(fixtureDf_MID[,8:12] )
Cluster_MID <- plot_ly(fixtureDf_MID, y = fixtureDf_MID$totFDR, x = fixtureDf_MID$Cost,
type = "scatter", mode = "markers", color = fixtureDf_MID$Team, text = fixtureDf_MID$Player, hoverinfo="text",  marker=list(size= fixtureDf_MID$Points))
#Forwards:  Transfer Selector based on Fixture difficulty rating, Cost and Total Points
fixtureDf_FWD <- fixtureDf[which(fixtureDf$Position == "FWD"),]
fixtureDf_FWD <- fixtureDf_FWD[which(fixtureDf_FWD$`Points Per Game` > 2),]
fixtureDf_FWD <- fixtureDf_FWD[,c(1:7,18:27)]
fixtureDf_FWD$totFDR <- rowSums(fixtureDf_FWD[,8:12] )
Cluster_FWD <- plot_ly(fixtureDf_FWD, y = fixtureDf_FWD$totFDR, x = fixtureDf_FWD$Cost,
type = "scatter", mode = "markers", color = fixtureDf_FWD$Team, text = fixtureDf_FWD$Player, hoverinfo="text",  marker=list(size= fixtureDf_FWD$Points))
#Defenders: Transfer Selector based on Fixture difficulty rating, Cost and Total Points
fixtureDf_DEF <- fixtureDf[which(fixtureDf$Position == "DEF"),]
fixtureDf_DEF <- fixtureDf_DEF[which(fixtureDf_DEF$`Points Per Game` > 2),]
fixtureDf_DEF <- fixtureDf_DEF[,c(1:7,18:27)]
fixtureDf_DEF$totFDR <- rowSums(fixtureDf_DEF[,8:12] )
Cluster_DEF <- plot_ly(fixtureDf_DEF, y = fixtureDf_DEF$totFDR, x = fixtureDf_DEF$Cost,
type = "scatter", mode = "markers", color = fixtureDf_DEF$Team, text = fixtureDf_DEF$Player, hoverinfo="text",  marker=list(size= fixtureDf_DEF$Points))
#Player's points breakdown table
playerPerformence <- data.frame(elements2016[c(1,3,38:41,43:47,49,32)])
playerPerformence <- merge(playerPerformence, PlayerStatusElements[c(1,4,5)], by=c('id'))
playerPerformence$Rest <- 0
colnames(playerPerformence) <- c("id", "Player", "Minutes",
"Goal", "Assist",
"CS", "OG",
"PS", "PM", "YC",
"RC", "Bonus", "Total Pts", "Team", "Role", "Rest")
playerPerformence <- playerPerformence[, colnames(playerPerformence)[c(1,2,14,15,3,4:12,16,13)]]
GoalPts <- function(x)
{
pts <-  ifelse(x=='MID', 5,
ifelse(x == 'FWD', 4, 6))
return(pts)
}
CSPts <- function(x)
{
pts <-  ifelse((x=='GKP'|x=="DEF"), 4,
ifelse(x == 'MID', 1, 0))
return(pts)
}
playerPerformence <- playerPerformence[which(playerPerformence$Minutes > 0),]
playerPerformence$Goal <- playerPerformence$Goal *  GoalPts(playerPerformence$Role)
playerPerformence$Assist <- playerPerformence$Assist * 3
playerPerformence$CS <- playerPerformence$CS * CSPts(playerPerformence$Role)
playerPerformence$OG <- playerPerformence$OG * -2
playerPerformence$PS <- playerPerformence$PS * 5
playerPerformence$PM <- playerPerformence$PM * -2
playerPerformence$YC <- playerPerformence$YC * -1
playerPerformence$RC <- playerPerformence$RC * -3
playerPerformence$Rest <- playerPerformence$`Total Pts` - (playerPerformence$Goal +
playerPerformence$Assist +
playerPerformence$CS +
playerPerformence$OG +
playerPerformence$PS +
playerPerformence$PM +
playerPerformence$YC +
playerPerformence$RC +
playerPerformence$Bonus)
PtsBreakdown <- datatable(playerPerformence[,c(2:4,6:16)],
rownames = FALSE,
filter = 'top',
options = list(
searchHighlight = TRUE,
autoWidth = TRUE,
pageLength = 10,
lengthMenu = c(10, 25, 50, 100, 300, 600)
)) %>%
formatStyle('Goal',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('Assist',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('CS',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('OG',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('PS',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('PM',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('YC',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('RC',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('Bonus',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('Rest',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)%>%
formatStyle('Total Pts',
Color = styleInterval(c(-0.1, 0), c('red', 'blue', 'green')),
fontWeight = 'bold'
)
#Create Output HTML Files
htmlwidgets::saveWidget(as.widget(PShtml), "D:/github/gitFPL/fplBoardLive/2017/PlayerStatus.html")
htmlwidgets::saveWidget(as.widget(ILhtml), "D:/github/gitFPL/fplBoardLive/2017/InjuryLeague.html")
htmlwidgets::saveWidget(as.widget(PPhtml), "D:/github/gitFPL/fplBoardLive/2017/PriceWatch.html")
htmlwidgets::saveWidget(as.widget(ppChangeViz), "D:/github/gitFPL/fplBoardLive/2017/ppChangeViz.html")
htmlwidgets::saveWidget(as.widget(ptsPerMill), "D:/github/gitFPL/fplBoardLive/2017/ptsPerMillViz.html")
htmlwidgets::saveWidget(as.widget(ptsPerGamePerMill), "D:/github/gitFPL/fplBoardLive/2017/ptsPerGamePerMillViz.html")
htmlwidgets::saveWidget(as.widget(fdrTable), "D:/github/gitFPL/fplBoardLive/2017/FixturesTable.html")
htmlwidgets::saveWidget(as.widget(PtsBreakdown), "D:/github/gitFPL/fplBoardLive/2017/PtsBreakdown.html")
htmlwidgets::saveWidget(as.widget(Cluster_MID), "D:/github/gitFPL/fplBoardLive/2017/MidPicker.html")
htmlwidgets::saveWidget(as.widget(Cluster_FWD), "D:/github/gitFPL/fplBoardLive/2017/FwdPicker.html")
htmlwidgets::saveWidget(as.widget(Cluster_DEF), "D:/github/gitFPL/fplBoardLive/2017/DefPicker.html")
#GP: TreeMap generated with 'htmltools' needs different method for saving "save_html" is official for the package - was throwing many errors otherwise
save_html(ptree, "D:/github/gitFPL/fplBoardLive/2017/playerPtsTreemap.html", background = "white", libdir = "D:/github/gitFPL/fplBoardLive/2017/")
htmlwidgets::saveWidget(as.widget(tAnomaly), "D:/github/gitFPL/fplBoardLive/2017/TransferAnomaly.html")
#remove finished chart/viz variables
rm(PShtml, ILhtml, PPhtml, ppChangeViz, ptsPerMill, ptsPerGamePerMill, fdrTable, tAnomaly, Cluster_DEF, Cluster_FWD, Cluster_MID, ptree)
#remove variables with no further use
rm(ax, ay, bx, by, cx, cy)
print(date())
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/PlayerStatus2016.R')
install.packages('d3treeR')
version
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/DailyPriceChangeWordCloud.R')
source('D:/FplBoard/format/injuryTree.R')
#NotE: use 'res=' to param for resolution(default is 72), helps to fix the issue of '*could not be fit on page. It will not be plotted.'
png("D:/github/fplAnalytics/img/InjuryWatch.png", width = 800, height = 450, units = "px", res = 60)
wordcloud(wordCloudDF$Player, wordCloudDF$SelectedBy, colors = wordCloudDF$colorid, ordered.colors = TRUE)
dev.off()
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/DailyPriceChangeWordCloud.R')
source('D:/FplBoard/format/injuryTree.R')
source('D:/FplBoard/format/injuryTree.R')
#Part of "Fantasy Premier League - Analysis and Prediction tool"
#Copy Right: 2016 Gaurab Poudel
#Clear the workspace - remove all variables
#rm(list = ls())
#Library 'dplyr' to use joins between data frames
library(dplyr)
library(wordcloud)
#List of all the players
players <- PlayerStatusElements %>% select(id, Player)
#Filter out all the players who are not available
injuryDF <- PlayerStatusElements[which(PlayerStatusElements$Status != "Available"),]
#from 'injuryDF' remove the ons who ar enot available - they are not in EPL anymore
#this gives only injured/suspended players who are still in EPL
injury_today <- injuryDF %>% select(id, Player, Status, `Playing chance %`, `Selected by %` ) %>% filter(Status != 'NotAvail')
#assign columnames
colnames(injury_today) <- c("id", "Player", "Status", "PlayingChance", "SelectedBy")
#Read the list of injured players from yesterday
injury_yesterday <- read.csv("D:/github/gitFPL/fplBoardLive/data/injuryDF_yesterday.csv", header = TRUE, sep = ";", stringsAsFactors=FALSE)
#Players who became Fit since yesterday
nowFit <- anti_join(injury_yesterday, injury_today, by='id')
#Players who became injured since yesterday
newInjury  <- anti_join(injury_today, injury_yesterday, by='id')
#If conditions because if there is no new injurey or fitness data, then it would throw error
if (nrow(nowFit) > 0)
{
nowFit$colorid <- "green"
nowFit$PlayingChance <- 100
}
if (nrow(newInjury) > 0)
{
newInjury$colorid <- "zzz"
newInjury$colorid <- ifelse(newInjury$PlayingChance != '0', "orange", "red")
}
#Word cloud would be made of both the DFs
wordCloudDF <- rbind(nowFit, newInjury)
logo <- c(9999, "@fplAnalytics", "Available", 100, 7, "blue")
wordCloudDF <- rbind(logo, wordCloudDF)
wordCloudDF$SelectedBy <- as.numeric(as.character(wordCloudDF$SelectedBy))
#SelectedBy is used to denote the size of the letters, make at least 10, so that very low values will show up nicely
wordCloudDF[which(wordCloudDF$SelectedBy < 10),]$SelectedBy <- 10
#NotE: use 'res=' to param for resolution(default is 72), helps to fix the issue of '*could not be fit on page. It will not be plotted.'
png("D:/github/fplAnalytics/img/InjuryWatch.png", width = 800, height = 450, units = "px", res = 60)
wordcloud(wordCloudDF$Player, wordCloudDF$SelectedBy, colors = wordCloudDF$colorid, ordered.colors = TRUE)
dev.off()
#Word cloud would be made of both the DFs
wordCloudDF <- rbind(nowFit, newInjury)
logo <- c(9999, "@fplAnalytics", "Available", 100, 7, "blue")
wordCloudDF <- rbind(logo, wordCloudDF)
wordCloudDF$SelectedBy <- as.numeric(as.character(wordCloudDF$SelectedBy))
#Word cloud would be made of both the DFs
wordCloudDF <- rbind(nowFit, newInjury)
logo <- c(9999, "@fplAnalytics", "Available", 100, 7, "blue")
wordCloudDF <- rbind(logo, wordCloudDF)
#NotE: use 'res=' to param for resolution(default is 72), helps to fix the issue of '*could not be fit on page. It will not be plotted.'
png("D:/github/fplAnalytics/img/InjuryWatch.png", width = 800, height = 450, units = "px", res = 60)
wordcloud(wordCloudDF$Player, wordCloudDF$SelectedBy, colors = wordCloudDF$colorid, ordered.colors = TRUE)
dev.off()
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/DailyPriceChangeWordCloud.R')
source('D:/FplBoard/format/injuryTree.R')
source('D:/FplBoard/format/PlayerStatus2016.R')
source('D:/FplBoard/format/FixtureDF.R')
setwd("D:/github/BucketListMap")
source('D:/github/BucketListMap/civ6Wonders.R')
setwd("D:/github/BucketListMap")
source('D:/github/BucketListMap/civ6Wonders.R')
